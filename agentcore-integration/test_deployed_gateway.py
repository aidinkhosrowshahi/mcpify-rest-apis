#!/usr/bin/env python3
"""
Test script for newly deployed AgentCore Gateway
Works with any gateway configuration file generated by deploy_retail_gateway.py
"""

import json
import sys
import subprocess
import os

def test_gateway_with_curl(config_file):
    """Test gateway using curl commands"""
    
    # Load configuration
    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå Configuration file not found: {config_file}")
        return False
    
    print(f"üß™ Testing Gateway: {config['gateway_id']}")
    print(f"URL: {config['gateway_url']}")
    print("=" * 60)
    
    # Get OAuth token
    print("üîë Getting OAuth token...")
    
    token_cmd = [
        'curl', '-s', '-X', 'POST', config['token_endpoint'],
        '-H', 'Content-Type: application/x-www-form-urlencoded',
        '-d', f"grant_type=client_credentials&client_id={config['client_id']}&client_secret={config['client_secret']}&scope={config['scope']}"
    ]
    
    try:
        result = subprocess.run(token_cmd, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ùå Token request failed: {result.stderr}")
            return False
        
        token_response = json.loads(result.stdout)
        access_token = token_response.get('access_token')
        
        if not access_token:
            print(f"‚ùå No access token in response: {result.stdout}")
            return False
        
        print("‚úÖ Token acquired successfully")
        
    except Exception as e:
        print(f"‚ùå Token acquisition failed: {e}")
        return False
    
    # Test tools list
    print("\nüìã Listing available tools...")
    
    tools_cmd = [
        'curl', '-s', '-X', 'POST', config['gateway_url'],
        '-H', f'Authorization: Bearer {access_token}',
        '-H', 'Content-Type: application/json',
        '-d', '{"jsonrpc": "2.0", "id": 1, "method": "tools/list"}'
    ]
    
    try:
        result = subprocess.run(tools_cmd, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ùå Tools list failed: {result.stderr}")
            return False
        
        tools_response = json.loads(result.stdout)
        tools = tools_response.get('result', {}).get('tools', [])
        
        print(f"‚úÖ Found {len(tools)} tools:")
        for tool in tools[:5]:  # Show first 5 tools
            print(f"   - {tool['name']}: {tool.get('description', 'No description')}")
        
        if len(tools) > 5:
            print(f"   ... and {len(tools) - 5} more tools")
        
    except Exception as e:
        print(f"‚ùå Tools list failed: {e}")
        return False
    
    # Test health check (find the health check tool)
    health_tool = None
    for tool in tools:
        if 'health' in tool['name'].lower():
            health_tool = tool['name']
            break
    
    if health_tool:
        print(f"\nüîç Testing {health_tool}...")
        
        health_cmd = [
            'curl', '-s', '-X', 'POST', config['gateway_url'],
            '-H', f'Authorization: Bearer {access_token}',
            '-H', 'Content-Type: application/json',
            '-d', json.dumps({
                "jsonrpc": "2.0",
                "id": 1,
                "method": "tools/call",
                "params": {
                    "name": health_tool,
                    "arguments": {}
                }
            })
        ]
        
        try:
            result = subprocess.run(health_cmd, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"‚ùå Health check failed: {result.stderr}")
            else:
                health_response = json.loads(result.stdout)
                if 'error' in health_response:
                    print(f"‚ùå Health check error: {health_response['error']}")
                else:
                    print("‚úÖ Health check successful")
                    
        except Exception as e:
            print(f"‚ùå Health check failed: {e}")
    
    # Test products list (find the products tool)
    products_tool = None
    for tool in tools:
        if 'product' in tool['name'].lower() and 'list' in tool['name'].lower():
            products_tool = tool['name']
            break
    
    if products_tool:
        print(f"\nüì¶ Testing {products_tool}...")
        
        products_cmd = [
            'curl', '-s', '-X', 'POST', config['gateway_url'],
            '-H', f'Authorization: Bearer {access_token}',
            '-H', 'Content-Type: application/json',
            '-d', json.dumps({
                "jsonrpc": "2.0",
                "id": 1,
                "method": "tools/call",
                "params": {
                    "name": products_tool,
                    "arguments": {}
                }
            })
        ]
        
        try:
            result = subprocess.run(products_cmd, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"‚ùå Products list failed: {result.stderr}")
            else:
                products_response = json.loads(result.stdout)
                if 'error' in products_response:
                    print(f"‚ùå Products list error: {products_response['error']}")
                else:
                    print("‚úÖ Products list successful")
                    
        except Exception as e:
            print(f"‚ùå Products list failed: {e}")
    
    print("\nüéâ Gateway testing completed!")
    print(f"\nYour gateway is ready for integration with QuickSuite!")
    print(f"Use the configuration in {config_file} for setup.")
    
    return True

def main():
    if len(sys.argv) != 2:
        print("Usage: python test_deployed_gateway.py <config_file>")
        print("Example: python test_deployed_gateway.py retail_gateway_config_abc123.json")
        sys.exit(1)
    
    config_file = sys.argv[1]
    
    if not os.path.exists(config_file):
        print(f"‚ùå Configuration file not found: {config_file}")
        sys.exit(1)
    
    success = test_gateway_with_curl(config_file)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()